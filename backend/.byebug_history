c
unavailable.errors.details
unavailable.errors
unavailable
c
book.total_copies == book.borrowings.active.count
c
book.total_copies == book.borrowings.active.count
c
book.total_copies == book.borrowings.active.count
c
book.total_copies == book.borrowings.active.count
book.total_copies
book.reload.borrowings.active.count
c
book.reload.borrowings.active.count
c
book.reload.borrowings.active.count
book.borrowings.active.count
book.total_copies
c
book.borrowings.active.count
c
borrowing.valid?
borrowing
exit
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
book.total_copies
exit
book.total_copies
c
book.total_copies
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
book.borrowings.active
exit
book.borrowings.active
book.borrowings
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
c
book.borrowings.active.count
book.borrowings.active
book.borrowings
c
exit
Borrowing.last
json.dig('dashboard', 'books_due_today')
json.dig('dashboard')
json.dig(:dashboard)
json
c
continue
c
continue
c
exit
@borrowing.return!
@borrowing
c
@borrowing.return!
@borrowing
exit
Borrowing.find_by(borrowing_params)
borrowing_params
exit
params
borrowing_params
current_user
params
exit
params
c
a
exit
a.errors.details
a.errors
a
c
borrowing
c
@borrowing.errors.messages
@borrowing.errors
c
user.borrowings.where(book: book).any?
user.borrowings.where(book: book)
user.borrowings.any?(book: book)
user.borrowings.books
user.borrowings
self
user.borrowings
sel
user.borrowings
Borrowing.count
c
Borrowing.count
c
Borrowing.count
Borrowings.count
user.reload.borrowings
user.borrowings
c
self
seld
user.borrowings
c
borrowing
second_borrowing
c
borrowing_params
c
post borrowings_url, params: { borrowing: valid_attributes }
c
valid_attributes
borrowings_url
c
get search_books_url, params: { q: 'hegel' } , as: :json
get search_books_url, params: { q: 'hegel' }
search_books_url
c
json
response.body
response
c
post books_url, params: { book: valid_attributes }, as: :json
c
books_url
valid_attributes
c
JSON(response.body)
response.body
response
response.size
c
user
response
c
user
c
response.status
response
c
book
c
exit
subject
